// OPENED: Thu Mar 03 13:54:45 UTC 2022
// RESULT: zanetti-20220303.txt
graph.io(graphml()).readGraph('air-routes.graphml')
graph.io(graphml()).readGraph('/opt/janusgraph/air-routes.graphml')
graph.io(graphml()).readGraph('/opt/janusgraph/mydata/air-routes.graphml')
// RESULT: null
graph
// RESULT: tinkergraph[vertices:3619 edges:50148]
graph.toString()
// RESULT: tinkergraph[vertices:3619 edges:50148]
g.V().has('code', 'AUS').out().toList()
g = graph.traversal()
// RESULT: graphtraversalsource[tinkergraph[vertices:3619 edges:50148], standard]
g.V().has('code', 'AUS').out().toList()
// RESULT: [v[1274], v[9], v[10], v[11], v[12], v[13], v[416], v[430], v[549], v[929], v[1], v[4], v[5], v[6], v[7], v[8], v[21], v[22], v[23], v[24], v[25], v[26], v[15], v[16], v[17], v[18], v[20], v[49], v[52], v[136], v[147], v[149], v[178], v[180], v[182], v[47], v[27], v[28], v[29], v[30], v[186], v[187], v[188], v[190], v[273], v[278], v[389], v[183], v[184], v[185], v[39], v[41], v[42], v[45], v[46], v[31], v[34], v[35], v[38]]
g.V().hasLabel('airport').groupCount().by('country')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), GroupCountStep(value(country))]
g.v().has('code', 'AUS').out().out().out().has('code', 'AGR').path().by('code')
g.V().has('code', 'AUS').out().out().out().has('code', 'AGR').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), HasStep([code.eq(AGR)]), PathStep([value(code)])]
g.V().has('code', 'AUS').repeat(out()).times(3).has('code', 'AGR').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), VertexStep(OUT,vertex), NoOpBarrierStep(2500), VertexStep(OUT,vertex), NoOpBarrierStep(2500), VertexStep(OUT,vertex), NoOpBarrierStep(2500), HasStep([code.eq(AGR)]), PathStep([value(code)])]
g.V().hasLabel('airport')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)])]
g.V().has('code', 'DFW')
// RESULT: [TinkerGraphStep(vertex,[code.eq(DFW)])]
g.V().hasLabel('airport').has('code', 'DFW')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)])]
g.V().has('airport', 'code', 'DFW')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)])]
g.V().has('airport', 'code', 'DFW').next()
// RESULT: v[8]
g.V().has('airport', 'code', 'DFW').next().getClass()
// RESULT: class org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex
g.V().has('airport', 'code', 'DFW').values()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)]), PropertiesStep(value)]
g.V().has('airport', 'code', 'DFW').properties()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)]), PropertiesStep(property)]
g.V().has('airport', 'code', 'DFW').values('lon')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)]), PropertiesStep([lon],value)]
g.V().has('airport', 'code', 'DFW').values('lon', 'lat', 'code', 'icao')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(DFW)]), PropertiesStep([lon, lat, code, icao],value)]
g.E().properties
// RESULT: [bytecode:[[], [E()]], traverserSetSupplier:org.apache.tinkerpop.gremlin.util.function.TraverserSetSupplier@a820ecc, class:class org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal, graph:Optional[tinkergraph[vertices:3619 edges:50148]], steps:[GraphStep(edge,[])], strategies:strategies[ConnectiveStrategy, IdentityRemovalStrategy, ByModulatorOptimizationStrategy, EarlyLimitStrategy, MatchPredicateStrategy, FilterRankingStrategy, InlineFilterStrategy, IncidentToAdjacentStrategy, AdjacentToIncidentStrategy, RepeatUnrollStrategy, CountStrategy, PathRetractionStrategy, LazyBarrierStrategy, TinkerGraphCountStrategy, TinkerGraphStepStrategy, ProfileStrategy, StandardVerificationStrategy], sideEffects:sideEffects[size:0], locked:false, traverserRequirements:[], traverserGenerator:org.apache.tinkerpop.gremlin.process.traversal.traverser.B_O_TraverserGenerator@da86085, root:true, traversalSource:Optional[graphtraversalsource[tinkergraph[vertices:3619 edges:50148], standard]], startStep:GraphStep(edge,[]), parent:org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep@9b2b7fa1, endStep:GraphStep(edge,[])]
g.E().properties()
// RESULT: [TinkerGraphStep(edge,[]), PropertiesStep(property)]
g.E().has('dist').count()
// RESULT: [TinkerGraphStep(edge,[]), TraversalFilterStep([PropertiesStep([dist],property)]), CountGlobalStep]
g.E().count()
// RESULT: [TinkerCountGlobalStep(edge)]
g.V().hasNot('region').count()
// RESULT: [TinkerGraphStep(vertex,[]), NotStep([PropertiesStep([region],property)]), CountGlobalStep]
g.V().hasLabel('airport').count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), CountGlobalStep]
g.E().count()
// RESULT: [TinkerCountGlobalStep(edge)]
g.V().count()
// RESULT: [TinkerCountGlobalStep(vertex)]
g.V().hasLabel('airport').outE('route').count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), VertexStep(OUT,[route],edge), CountGlobalStep]
g.V().label()
// RESULT: [TinkerGraphStep(vertex,[]), LabelStep]
g.E().label()
// RESULT: [TinkerGraphStep(edge,[]), LabelStep]
g.V().groupCount().by(label)
// RESULT: [TinkerGraphStep(vertex,[]), GroupCountStep(label)]
g.E().groupCount().by(label)
// RESULT: [TinkerGraphStep(edge,[]), GroupCountStep(label)]
g.E('route').label
g.E('route').label()
// RESULT: [TinkerGraphStep(edge,[route]), LabelStep]
g.E('route').properties()
// RESULT: [TinkerGraphStep(edge,[route]), PropertiesStep(property)]
g.E('route').properties()
// RESULT: [TinkerGraphStep(edge,[route]), PropertiesStep(property)]
g.V().hasLabel('continent').group().by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(continent)]), GroupStep(value(code),[VertexStep(OUT,edge), CountGlobalStep])]
g.V().hasLabel('country').group().by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(country)]), GroupStep(value(code),[VertexStep(OUT,edge), CountGlobalStep])]
g.V().has('airport', 'code', 'AUS').out().values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'AUS').out('route').values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,[route],vertex), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'AUS').out('route').out('route').values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,[route],vertex), VertexStep(OUT,[route],vertex), NoOpBarrierStep(2500), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'LCY').in('route').values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(IN,[route],vertex), PropertiesStep([code],value)]
g.V().has('airport', 'code', 'LCY').in('route').values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(IN,[route],vertex), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'LCY').out('route').has('country', 'US').values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
g.V().has('code', 'LCY').out('route').has('country', 'US').values('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(LCY)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
g.V().has('airport', 'code', 'LHR').out('route').has('country', 'US').values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LHR)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
g.V().has('airport', 'code', 'LHR').out('route').has('country', 'US').values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LHR)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'LCY').outE().inV().path()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep]
g.V().has('airport', 'code', 'LCY').outE().inV().path().by('code').by('dist')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep([value(code), value(dist)])]
g.V().has('airport', 'code', 'LCY').outE().inV().path().by('code').by('dist').by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep([value(code), value(dist), value(code)])]
g.V().has('airport', 'code', 'LCY').out().limit(5).value('runaways').path().by('code').by('code').by()
g.V().has('airport', 'code', 'LCY').out().limit(5).values('runaways').path().by('code').by('code').by()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PropertiesStep([runaways],value), PathStep([value(code), value(code), identity])]
g.V().has('airport', 'code', 'LCY').out().limit(5).values('runways').path().by('code').by('code').by()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PropertiesStep([runways],value), PathStep([value(code), value(code), identity])]
g.V().has('airport', 'code', 'LCY').out().limit(5).values('runways').path().by('code').by('code').by()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PropertiesStep([runways],value), PathStep([value(code), value(code), identity])]
g.V()
// RESULT: [TinkerGraphStep(vertex,[])]
g.V(3).values()
// RESULT: [TinkerGraphStep(vertex,[3]), PropertiesStep(value)]
g.V(3)
// RESULT: [TinkerGraphStep(vertex,[3])]
g.V(3).out().limit().path().by(values('code', 'city').fold))
g.V(3).out().limit().path().by(values('code', 'city').fold())
g.V(3).out().limit(5).path().by(values('code', 'city').fold())
// RESULT: [TinkerGraphStep(vertex,[3]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PathStep([[PropertiesStep([code, city],value), FoldStep]])]
g.V()has('city', 'Austin').out().limit(5).path().by(values('code', 'city').fold())
// RESULT: [TinkerGraphStep(vertex,[city.eq(Austin)]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PathStep([[PropertiesStep([code, city],value), FoldStep]])]
g.V()has('city', 'Austin').out().limit(5).path().by(values('code', 'city').fold())
// RESULT: [TinkerGraphStep(vertex,[city.eq(Austin)]), VertexStep(OUT,vertex), RangeGlobalStep(0,5), PathStep([[PropertiesStep([code, city],value), FoldStep]])]
g.E().label()
// RESULT: [TinkerGraphStep(edge,[]), LabelStep]
g.E().label().limit(1)
// RESULT: [TinkerGraphStep(edge,[]), RangeGlobalStep(0,1), LabelStep]
g.E().label().limit(1).properties()
g.E().label().properties()
g.E().properties()
// RESULT: [TinkerGraphStep(edge,[]), PropertiesStep(property)]
g.E().properties().limit(1)
// RESULT: [TinkerGraphStep(edge,[]), PropertiesStep(property), RangeGlobalStep(0,1)]
g.V().label().limit(1)
// RESULT: [TinkerGraphStep(vertex,[]), RangeGlobalStep(0,1), LabelStep]
:record stop
// CLOSED: Fri Mar 04 09:10:19 UTC 2022
