// OPENED: Fri Mar 04 09:30:37 UTC 2022
// RESULT: zanetti-20220304.txt
// OPENED: Thu Mar 03 13:54:45 UTC 2022
// RESULT: true
// RESULT: zanetti-20220303.txt
// RESULT: true
graph.io(graphml()).readGraph('air-routes.graphml')
,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
Step(vertex,[~label.eq(airport), code.eq(LHR)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value)]
aphStep(vertex,[~label.eq(airport), code.eq(LHR)]), VertexStep(OUT,[route],vertex), HasStep([country.eq(US)]), PropertiesStep([code],value), FoldStep]
eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep]
l.eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep([value(code), value(dist)])]
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(LCY)]), VertexStep(OUT,edge), EdgeVertexStep(IN), PathStep([value(code), value(dist), value(code)])]
// RESULT: true
g.V().has('airport', 'code', 'LCY').out().limit(5).value('runaways').path().by('code').by('code').by()
g.V().has('airport', 'code', 'AUS').out().out().path().by('code').limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), VertexStep(OUT,vertex), RangeGlobalStep(0,10), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().as('a').out().as('b').out().path().by('code').from('a').to('b').limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex)@[a], VertexStep(OUT,vertex)@[b], VertexStep(OUT,vertex), RangeGlobalStep(0,10), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out()..out().out().path().by('code').limit(10)
g.V().has('airport', 'code', 'AUS').out().out().out().path().by('code').limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), RangeGlobalStep(0,10), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().as('a').out().as('b').out().path().by('code').from('a').to('b').limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex)@[a], VertexStep(OUT,vertex)@[b], VertexStep(OUT,vertex), RangeGlobalStep(0,10), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').count(repeat(out()).until(has('code', 'SYD'))
)
// RESULT: 0
g.V().has('airport', 'code', 'AUS').count(repeat(out())).until(has('code', 'SYD')
)
g.V().has('airport', 'code', 'AUS').count(repeat(out()).until(has('code', 'SYD'))
)
// RESULT: 0
g.V().has('airport', 'code', 'AUS').count(repeat(out().until(has('code', 'SYD'))))
// RESULT: 0
g.V().has('airport', 'code', 'AUS').count(repeat(out().until(has('airport', 'code', 'SYD'))))
// RESULT: 0
g.V().has('airport', 'code', 'AUS').count(repeat(out('route').until(has('airport', 'code', 'SYD'))))
// RESULT: 0
g.V().has('code', 'DFW').as('from').out().has('region', 'US-CA').as('to').select('from', 'to')
// RESULT: [TinkerGraphStep(vertex,[code.eq(DFW)])@[from], VertexStep(OUT,vertex), HasStep([region.eq(US-CA)])@[to], SelectStep(last,[from, to])]
g.V().has('code', 'DFW').as('from').out().has('region', 'US-CA').as('to').select('from', 'to').by('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(DFW)])@[from], VertexStep(OUT,vertex), HasStep([region.eq(US-CA)])@[to], SelectStep(last,[from, to],[value(code)])]
g.V().has('type', 'airport').limit(10).as('a', 'b', 'c').select('a', 'b', 'c').by('code').by('region').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[type.eq(airport)])@[a, b, c], RangeGlobalStep(0,10), SelectStep(last,[a, b, c],[value(code), value(region), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'code', 'AUS').out().values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), PropertiesStep([code],value), FoldStep]
g.V().has('type', 'airport').limit(10).project('IATA', 'Region', 'Routes').by('code').by('region').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[type.eq(airport)]), RangeGlobalStep(0,10), ProjectStep([IATA, Region, Routes],[value(code), value(region), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'code', 'AUS').count(repeat(out('route').until(has('airport', 'code', 'SYD'))))
// RESULT: 0
g.V().has('airport', 'code', 'AUS').count(repeat(out('route').until(inV(has('airport', 'code', 'SYD')))))
g.V().has('airport', 'code', 'AUS').count(repeat(out('route').until(has('airport', 'code', 'SYD'))))
// RESULT: 0
g.V(1)
// RESULT: [TinkerGraphStep(vertex,[1])]
g.V(1).as('a').V(2).as('a').select('a')
// RESULT: [TinkerGraphStep(vertex,[1])@[a], TinkerGraphStep(vertex,[2])@[a], SelectOneStep(last,a)]
g.V().has('code', 'AUS').as('a').out().as('a').limit(10).select(last, 'a').by('code').fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)])@[a], VertexStep(OUT,vertex)@[a], RangeGlobalStep(0,10), SelectOneStep(last,a,value(code)), FoldStep]
g.V().has('code', 'LAX').out().out().out().out().out().limit(1).path().by('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(LAX)]), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), RangeGlobalStep(0,1), PathStep([value(code)])]
g.V().has('code', 'LAX').out().out().out().out().out().path().by('code')
// RESULT: [TinkerGraphStep(vertex,[code.eq(LAX)]), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), VertexStep(OUT,vertex), PathStep([value(code)])]
g.V().has('code', 'LAX').out().as('stop').out().out().as('stop').out().out().as('stop').limit(1).select(all, 'stop').unfold().values('code').fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(LAX)]), VertexStep(OUT,vertex)@[stop], VertexStep(OUT,vertex), VertexStep(OUT,vertex)@[stop], VertexStep(OUT,vertex), VertexStep(OUT,vertex)@[stop], RangeGlobalStep(0,1), SelectOneStep(all,stop), NoOpBarrierStep(2500), UnfoldStep, NoOpBarrierStep(2500), PropertiesStep([code],value), FoldStep]
g.V().has('code', 'MIA').outE().as('e').inV().has('code', 'DFW').select('e')
// RESULT: [TinkerGraphStep(vertex,[code.eq(MIA)]), VertexStep(OUT,edge)@[e], EdgeVertexStep(IN), HasStep([code.eq(DFW)]), SelectOneStep(last,e)]
g.V().has('code', 'MIA').outE().as('e').inV().has('code', 'DFW').select('e').values('dist')
// RESULT: [TinkerGraphStep(vertex,[code.eq(MIA)]), VertexStep(OUT,edge)@[e], EdgeVertexStep(IN), HasStep([code.eq(DFW)]), SelectOneStep(last,e), NoOpBarrierStep(2500), PropertiesStep([dist],value)]
g.V().has('airport', 'code', 'AUS').repeat(timeLimit(10).out()).until(has('code', 'LHR')).path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), RepeatStep([TimeLimitStep(10), VertexStep(OUT,vertex), RepeatEndStep],until([HasStep([code.eq(LHR)])]),emit(false)), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').repeat(out()).until(has('code', 'LHR')).path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), RepeatStep([VertexStep(OUT,vertex), RepeatEndStep],until([HasStep([code.eq(LHR)])]),emit(false)), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').repeat(out()).until(has('code', 'SYD')).path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), RepeatStep([VertexStep(OUT,vertex), RepeatEndStep],until([HasStep([code.eq(SYD)])]),emit(false)), PathStep([value(code)])]
g.V().has('code', 'AUS').valueMap().unfold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertyMapStep(value), UnfoldStep]
g.V().has('code', 'AUS').valueMap().fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertyMapStep(value), FoldStep]
g.V().has('code', 'AUS').valueMap().unfold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertyMapStep(value), UnfoldStep]
g.V().has('code', 'AUS').valueMap().fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertyMapStep(value), FoldStep]
g.V().has('code', 'SFO').valueMap('code').with(withOptions.tokens).unfold()
g.V().has('code', 'SFO').valueMap('code').with(WithOptions.tokens).unfold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(SFO)]), PropertyMapStep([code],value), UnfoldStep]
g.V().has('airport', 'code', 'AUS').repeat(out()).until(has('code', 'SYD')).count()
g.V().has('code', 'AUS').elementMap('city')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), ElementMapStep([city])]
g.V(3).outE().limit(1).elementMap()
// RESULT: [TinkerGraphStep(vertex,[3]), VertexStep(OUT,edge), RangeGlobalStep(0,1), ElementMapStep]
Gremlin.version()
// RESULT: 1.21.0
Tinkerpop.version()
Tinkerpop
g.V(3).property('id', 3)
// RESULT: [TinkerGraphStep(vertex,[3]), AddPropertyStep({key=[id], value=[3]})]
g.V(3).property('id', 3).values()
// RESULT: [TinkerGraphStep(vertex,[3]), AddPropertyStep({key=[id], value=[3]}), PropertiesStep(value)]
g.V().property('id', 3)
// RESULT: [TinkerGraphStep(vertex,[]), AddPropertyStep({key=[id], value=[3]})]
g.V().property('id', 3).values()
// RESULT: [TinkerGraphStep(vertex,[]), AddPropertyStep({key=[id], value=[3]}), PropertiesStep(value)]
g.V().hasLabel('airport).property('id', 3).values()
)
g.V().hasLabel('airport').property('id', 3).values()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), AddPropertyStep({key=[id], value=[3]}), PropertiesStep(value)]
g.V().hasLabel('airport').property('id', 3)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), AddPropertyStep({key=[id], value=[3]})]
g.V().hasLabel('airport').property('id', 3).fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), AddPropertyStep({key=[id], value=[3]}), FoldStep]
g.E(5161).project('v', 'IN', 'OUT').by(valueMap(true)).by(inV().union(id(), label()).fold()).by(outV().union(id(), label()).fold())
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [EdgeVertexStep(IN), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep], [EdgeVertexStep(OUT), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep]])]
g.E().project('v', 'IN', 'OUT').by(valueMap(true)).by(inV().union(id(), label()).fold()).by(outV().union(id(), label()).fold()).limit(1)
// RESULT: [TinkerGraphStep(edge,[]), RangeGlobalStep(0,1), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [EdgeVertexStep(IN), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep], [EdgeVertexStep(OUT), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep]])]
g.V().has('code', 'AUS')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)])]
g.V().has('code', 'AUS').properties().fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep(property), FoldStep]
g.V().has('code', 'AUS').properties()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep(property)]
g.V().has('code', 'AUS').values('city').next()
// RESULT: Austin
g.E(100)
// RESULT: [TinkerGraphStep(edge,[100])]
g.E(100).properties
// RESULT: [bytecode:[[], [E(100)]], traverserSetSupplier:org.apache.tinkerpop.gremlin.util.function.TraverserSetSupplier@a820ecc, class:class org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal, graph:Optional[tinkergraph[vertices:3619 edges:50148]], steps:[GraphStep(edge,[100])], strategies:strategies[ConnectiveStrategy, IdentityRemovalStrategy, ByModulatorOptimizationStrategy, EarlyLimitStrategy, MatchPredicateStrategy, FilterRankingStrategy, InlineFilterStrategy, IncidentToAdjacentStrategy, AdjacentToIncidentStrategy, RepeatUnrollStrategy, CountStrategy, PathRetractionStrategy, LazyBarrierStrategy, TinkerGraphCountStrategy, TinkerGraphStepStrategy, ProfileStrategy, StandardVerificationStrategy], sideEffects:sideEffects[size:0], locked:false, traverserRequirements:[], traverserGenerator:org.apache.tinkerpop.gremlin.process.traversal.traverser.B_O_TraverserGenerator@da86085, root:true, traversalSource:Optional[graphtraversalsource[tinkergraph[vertices:3619 edges:50148], standard]], startStep:GraphStep(edge,[100]), parent:org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep@9b2b7fa1, endStep:GraphStep(edge,[100])]
g.E(100)
// RESULT: [TinkerGraphStep(edge,[100])]
g.E(100L)
// RESULT: [TinkerGraphStep(edge,[100])]
g.E()
// RESULT: [TinkerGraphStep(edge,[])]
g.E(3640)
// RESULT: [TinkerGraphStep(edge,[3640])]
g.E(3640L)
// RESULT: [TinkerGraphStep(edge,[3640])]
g.E("3640")
// RESULT: [TinkerGraphStep(edge,[3640])]
g.V("3")
// RESULT: [TinkerGraphStep(vertex,[3])]
g.V("3").values()
// RESULT: [TinkerGraphStep(vertex,[3]), PropertiesStep(value)]
g.V('3').values()
// RESULT: [TinkerGraphStep(vertex,[3]), PropertiesStep(value)]
g.E('5161').project('v', 'IN', 'OUT').by(valueMap(true)).by(inV().union(id(), label()).fold()).by(outV().union(id(), label()).fold())
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [EdgeVertexStep(IN), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep], [EdgeVertexStep(OUT), UnionStep([[IdStep, EndStep], [LabelStep, EndStep]]), FoldStep]])]
g.E('5161').project('v', 'IN', 'OUT').by(valueMap(true)).by(project('id', 'label').by(inV().id()).by(inV().label()))
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [ProjectStep([id, label],[[EdgeVertexStep(IN), IdStep], [EdgeVertexStep(IN), LabelStep]])]])]
g.E('5161').project('v', 'IN', 'OUT').by(valueMap(true)).by(project('id', 'label').by(inV().id()).by(inV().label())).
by(project('id', 'label').
by(outV().id()).
by(outV().label()).
unfold()
)
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [ProjectStep([id, label],[[EdgeVertexStep(IN), IdStep], [EdgeVertexStep(IN), LabelStep]])], [ProjectStep([id, label],[[EdgeVertexStep(OUT), IdStep], [EdgeVertexStep(OUT), LabelStep]]), UnfoldStep]])]
g.E('5161').project('v', 'IN', 'OUT').by(valueMap(true)).by(project('id', 'label').by(inV().id()).by(inV().label()))
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [ProjectStep([id, label],[[EdgeVertexStep(IN), IdStep], [EdgeVertexStep(IN), LabelStep]])]])]
g.E('5161').project('v', 'IN', 'OUT').by(valueMap(true)).by(project('id', 'label').by(inV().id()).by(inV().label())).
by(project('id', 'label').
by(outV().id()).
by(outV().label())).
unfold()
// RESULT: [TinkerGraphStep(edge,[5161]), ProjectStep([v, IN, OUT],[[PropertyMapStep(value)], [ProjectStep([id, label],[[EdgeVertexStep(IN), IdStep], [EdgeVertexStep(IN), LabelStep]])], [ProjectStep([id, label],[[EdgeVertexStep(OUT), IdStep], [EdgeVertexStep(OUT), LabelStep]])]]), UnfoldStep]
g.V().hasId(8).values('code')
// RESULT: [TinkerGraphStep(vertex,[8]), PropertiesStep([code],value)]
g.V().hasId('8').values('code')
// RESULT: [TinkerGraphStep(vertex,[8]), PropertiesStep([code],value)]
g.V().has(id, 8).values('code')
// RESULT: [TinkerGraphStep(vertex,[8]), PropertiesStep([code],value)]
g.V().has(id, '8').values('code')
// RESULT: [TinkerGraphStep(vertex,[8]), PropertiesStep([code],value)]
g.V().hasId(between(1,6))
g.V().hasId(between(1,6))
g.V().hasId(between(1,6))
g.V('3').values('code')
// RESULT: [TinkerGraphStep(vertex,[3]), PropertiesStep([code],value)]
g.V('3', '6', '8', '15').values('code')
// RESULT: [TinkerGraphStep(vertex,[3, 6, 8, 15]), PropertiesStep([code],value)]
var query = g.V().has("code", "AUS").properties()
g.V().has("code", "AUS").properties()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep(property)]
query = g.V().has("code", "AUS").properties()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep(property)]
query.getClass()
// RESULT: class org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal
query = g.V().has("code", "AUS").properties().fold()
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep(property), FoldStep]
query.getClass()
// RESULT: class org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal
query = g.V().has("code", "AUS").properties().toList()
// RESULT: [vp[country->US], vp[code->AUS], vp[longest->12250], vp[city->Austin], vp[lon->-97.6698989868164], vp[type->airport], vp[elev->542], vp[icao->KAUS], vp[id->3], vp[region->US-TX], vp[runways->2], vp[lat->30.1944999694824], vp[desc->Austin Bergstrom ...]]
query.getClass()
// RESULT: class java.util.ArrayList
g.V().has('code', 'AUS').values('city')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), PropertiesStep([city],value)]
g.V().has('code', 'LBB').label()
// RESULT: [TinkerGraphStep(vertex,[code.eq(LBB)]), LabelStep]
g.V().hasLabel('country').has('code', 'AU').out('contains').values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(country), code.eq(AU)]), VertexStep(OUT,[contains],vertex), PropertiesStep([code],value)]
g.V().has('country', 'code', 'AU').out().values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(country), code.eq(AU)]), VertexStep(OUT,vertex), PropertiesStep([code],value)]
g.V().where(label().is(eq('airport')))
// RESULT: [TinkerGraphStep(vertex,[]), TraversalFilterStep([LabelStep, IsStep(eq(airport))])]
g.V().has(label, 'airport').count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), CountGlobalStep]
g.V().has(label().is(neq('airport').count()
g.V().has(label().is(neq('airport')).count()
)))
g.V().has(label().is(neq('airport')).count()
sjvlks
dkjjd))))
g.V().has(label().is(neq('airport'))).count()
g.V().has(label, neq('airport')).count()
// RESULT: [TinkerGraphStep(vertex,[~label.neq(airport)]), CountGlobalStep]
g.V().where(label().is(neq('airport'))).count()
// RESULT: [TinkerGraphStep(vertex,[]), TraversalFilterStep([LabelStep, IsStep(neq(airport))]), CountGlobalStep]
g.E().has(label, 'route').count()
// RESULT: [TinkerGraphStep(edge,[~label.eq(route)]), CountGlobalStep]
g.E().where(label().is(eq('route'))).count()
// RESULT: [TinkerGraphStep(edge,[]), TraversalFilterStep([LabelStep, IsStep(eq(route))]), CountGlobalStep]
g.E().hasLabel('route').count()
// RESULT: [TinkerGraphStep(edge,[~label.eq(route)]), CountGlobalStep]
g.V().hasLabel('airport').local(out('route').count()).limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), LocalStep([VertexStep(OUT,[route],edge), CountGlobalStep]), RangeGlobalStep(0,10)]
g.V().hasLabel('airport').local(out('route').count()).mean()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), LocalStep([VertexStep(OUT,[route],edge), CountGlobalStep]), MeanGlobalStep]
g.V().has("airport", "code", "AUS").out().count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,edge), CountGlobalStep]
g.V().hasLabel("airport").values("runways")
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([runways],value)]
g.V().hasLabel("airport").values("runways").sum()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([runways],value), SumGlobalStep]
g.V().hasLabel('airport').values('runways').mean()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([runways],value), MeanGlobalStep]
g.V().hasLabel('airport').values('longest').mean()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([longest],value), MeanGlobalStep]
g.V().hasLabel('airport').local(both('route').count()).mean()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), LocalStep([VertexStep(BOTH,[route],edge), CountGlobalStep]), MeanGlobalStep]
g.V().hasLabel('airport').values('longest').max()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([longest],value), MaxGlobalStep]
g.V().hasLabel('airport').local(out('route').count()).max()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), LocalStep([VertexStep(OUT,[route],edge), CountGlobalStep]), MaxGlobalStep]
g.V().hasLabel('airport').local(out('route').count()).min
g.V().hasLabel('airport').local(out('route').count()).min()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), LocalStep([VertexStep(OUT,[route],edge), CountGlobalStep]), MinGlobalStep]
g.V().hasLabel('airport').local(out('route')).min()
g.V().hasLabel('airport').value('longest').min()
g.V().hasLabel('airport').values('longest').min()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([longest],value), MinGlobalStep]
g.V().hasLabel('continent').values('desc').min()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(continent)]), PropertiesStep([desc],value), MinGlobalStep]
g.V().hasLabel('continent').values('desc').max()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(continent)]), PropertiesStep([desc],value), MaxGlobalStep]
g.V().has('runways', gte(5)).values('code', 'runways').fold()
// RESULT: [TinkerGraphStep(vertex,[runways.gte(5)]), PropertiesStep([code, runways],value), FoldStep]
g.V().has('runways', lt(3)).values('code', 'runways').fold()
// RESULT: [TinkerGraphStep(vertex,[runways.lt(3)]), PropertiesStep([code, runways],value), FoldStep]
g.V().has('runways', eq(3)).count()
// RESULT: [TinkerGraphStep(vertex,[runways.eq(3)]), CountGlobalStep]
g.V().values('runways').is(3).count()
// RESULT: [TinkerGraphStep(vertex,[]), PropertiesStep([runways],value), NoOpBarrierStep(2500), IsStep(eq(3)), CountGlobalStep]
g.V().has('runways', inside(3, 6)).values('code', 'runways')
// RESULT: [TinkerGraphStep(vertex,[runways.gt(3), runways.lt(6)]), PropertiesStep([code, runways],value)]
g.V().has('runways', inside(3, 6)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.gt(3), runways.lt(6)]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', outside(3, 6)).values('code', 'runways')
// RESULT: [TinkerGraphStep(vertex,[runways.or(lt(3), gt(6))]), PropertiesStep([code, runways],value)]
g.V().has('runways', outside(3, 6)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.or(lt(3), gt(6))]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', within(3..6)).values('code', 'runways')
// RESULT: [TinkerGraphStep(vertex,[runways.within(3..6)]), PropertiesStep([code, runways],value)]
g.V().has('runways', within(3..6)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.within(3..6)]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', within(1,2,3)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.within([1, 2, 3])]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', without(3..6)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.without(3..6)]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', between(5, 8)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.gte(5), runways.lt(8)]), PropertiesStep([code, runways],property), CountGlobalStep]
g.V().has('runways', between(5, 8)).values('code', 'runways').fold()
// RESULT: [TinkerGraphStep(vertex,[runways.gte(5), runways.lt(8)]), PropertiesStep([code, runways],value), FoldStep]
g.V().has('runways', between(5, 8)).values('code', 'runways').count()
// RESULT: [TinkerGraphStep(vertex,[runways.gte(5), runways.lt(8)]), PropertiesStep([code, runways],property), CountGlobalStep]
graph
// RESULT: tinkergraph[vertices:3619 edges:50148]
g.V().has('airport', 'region', 'US-TX').has('city', neq('Houston').values('code')
))))
g.V().has('airport', 'region', 'US-TX').has('city', neq('Houston')).values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(US-TX), city.neq(Houston)]), PropertiesStep([code],value)]
g.V().has('airport', 'code', 'AUS').out().has('code', within('DFW' 'DAL', 'IAH', 'HOU', 'SAT')).out().has('code', 'LAS').path().by('code')
g.V().has('airport', 'code', 'AUS').out().has('code', within('DFW', 'DAL', 'IAH', 'HOU', 'SAT')).out().has('code', 'LAS').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.within([DFW, DAL, IAH, HOU, SAT])]), VertexStep(OUT,vertex), HasStep([code.eq(LAS)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().has('code', without('DFW', 'DAL', 'IAH', 'HOU', 'SAT')).out().has('code', 'LAS').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.without([DFW, DAL, IAH, HOU, SAT])]), VertexStep(OUT,vertex), HasStep([code.eq(LAS)]), PathStep([value(code)])]
:clear
g.V().has('airport', 'code', 'AUS').out().has('code', without('PHX', 'LAX')).out().has('code', 'LAS').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.without([PHX, LAX])]), VertexStep(OUT,vertex), HasStep([code.eq(LAS)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().has('country', within('US', 'CA')).has('code', without('PHX', 'LAX')).out().has('code', 'LAS').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([country.within([US, CA]), code.without([PHX, LAX])]), VertexStep(OUT,vertex), HasStep([code.eq(LAS)]), PathStep([value(code)])]
g.V().hasId(within(1..3))
// RESULT: [TinkerGraphStep(vertex,[1, 2, 3])]
g.V().hasId(within('1'..'3'))
// RESULT: [TinkerGraphStep(vertex,[1, 2, 3])]
g.V().hasId(within('1', '2','3'))
// RESULT: [TinkerGraphStep(vertex,[1, 2, 3])]
g.V().hasId(within(['1','2','3']))
// RESULT: [TinkerGraphStep(vertex,[1, 2, 3])]
g.V().hasLabel('airport').has('city', between('Dal', 'Dam').values('city')
))))
g.V().hasLabel('airport').has('city', between('Dal', 'Dam')).values('city')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dam)]), PropertiesStep([city],value)]
g.V().hasLabel('airport').has('city', between('Dal', 'Dam')).values('city').dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dam)]), PropertiesStep([city],value), DedupGlobalStep]
g.V().hasLabel('airport').has('city', between('Dal', 'Dam')).values('city').order().dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dam)]), PropertiesStep([city],value), DedupGlobalStep, OrderGlobalStep]
g.V().hasLabel('airport').has('city', between('Dal', 'Dat')).values('city').order().dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dat)]), PropertiesStep([city],value), DedupGlobalStep, OrderGlobalStep]
g.V().has('airport', 'code', between('X', 'Xa')).values('code').fold() 
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.gte(X), code.lt(Xa)]), PropertiesStep([code],value), FoldStep]
g.V().has('airport', 'code', 'AUS').out().has('code', neq('DFW')).out().has('code', 'SYD').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.neq(DFW)]), VertexStep(OUT,vertex), HasStep([code.eq(SYD)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().not(values('code').is('DFW')).out().has('code', 'SYD').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), NotStep([PropertiesStep([code],value), IsStep(eq(DFW))]), VertexStep(OUT,vertex), HasStep([code.eq(SYD)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().and(has('code', neq('DFW')), has('code', neq('LAX'))).out().has('code', 'SYD').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.neq(DFW), code.neq(LAX)]), VertexStep(OUT,vertex), HasStep([code.eq(SYD)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'AUS').out().has('code', without('DFW', 'LAX')).out().has('code', 'SYD').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([code.without([DFW, LAX])]), VertexStep(OUT,vertex), HasStep([code.eq(SYD)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'SAT').out().has('code', without('DFW', 'LAX', 'PHX', 'JFK')).out().has('code', 'SLC').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(SAT)]), VertexStep(OUT,vertex), HasStep([code.without([DFW, LAX, PHX, JFK])]), VertexStep(OUT,vertex), HasStep([code.eq(SLC)]), PathStep([value(code)])]
g.V().has('airport', 'code', 'SAT').out().has('code', within('DFW', 'LAX', 'PHX', 'TUS')).out().has('code', 'SLC').path().by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(SAT)]), VertexStep(OUT,vertex), HasStep([code.within([DFW, LAX, PHX, TUS])]), VertexStep(OUT,vertex), HasStep([code.eq(SLC)]), PathStep([value(code)])]
g.V().has('code', 'AUS').out().has('country', without('US', 'CA')).values('city')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([country.without([US, CA])]), PropertiesStep([city],value)]
g.V().has('code', 'AUS').out().has('country', without('MX', 'CA')).values('city')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([country.without([MX, CA])]), PropertiesStep([city],value)]
g.V().has('code', 'AUS').out().has('country', within('MX', 'CA')).values('city')
// RESULT: [TinkerGraphStep(vertex,[code.eq(AUS)]), VertexStep(OUT,vertex), HasStep([country.within([MX, CA])]), PropertiesStep([city],value)]
g.V().hasLabel('airport').coin(0.5).limit(20).values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), CoinStep(0.5), RangeGlobalStep(0,20), PropertiesStep([code],value)]
g.V().hasLabel('airport').sample(1).id()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), SampleGlobalStep(1,(1.0)), IdStep]
g.V().hasLabel('airport').sample(1).id()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), SampleGlobalStep(1,(1.0)), IdStep]
g.V().hasLabel('airport').sample(1).id()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), SampleGlobalStep(1,(1.0)), IdStep]
g.V().hasLabel('airport').sample(20).values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), SampleGlobalStep(20,(1.0)), PropertiesStep([code],value)]
g.V().hasLabel('airport').has('city', between('Dal', 'Dat')).values('city').order().dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dat)]), PropertiesStep([city],value), DedupGlobalStep, OrderGlobalStep]
g.V().hasLabel('airport').has('city', between('dal', 'dat')).values('city').order().dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(dal), city.lt(dat)]), PropertiesStep([city],value), DedupGlobalStep, OrderGlobalStep]
g.V().hasLabel('airport').has('city', between('Dal', 'Dat')).values('city').order().dedup()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.gte(Dal), city.lt(Dat)]), PropertiesStep([city],value), DedupGlobalStep, OrderGlobalStep]
g.V().hasLabel('airport').has('city', startingWith('X')).values('city')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.startingWith(X)]), PropertiesStep([city],value)]
g.V().hasLabel('airport').has('city', startingWith('Dal')).values('city').dedup().fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.startingWith(Dal)]), PropertiesStep([city],value), DedupGlobalStep, FoldStep]
# Gremlin is CASE SENSITIVE
g.V().hasLabel('airport').or(has('city', startingWith('dal')), has('city',startingWith('Dal'))).dedup().by('city').count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.or(startingWith(dal), startingWith(Dal))]), DedupGlobalStep(value(city)), CountGlobalStep]
g.V().hasLabel('airport').has('city', endingWith('zhi')).values('city')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.endingWith(zhi)]), PropertiesStep([city],value)]
g.V().hasLabel('airport').has('city', containing('gzh')).values('city')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), city.containing(gzh)]), PropertiesStep([city],value)]
g.V().hasLabel('airport').limit(20).values('code').order().fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), RangeGlobalStep(0,20), PropertiesStep([code],value), OrderGlobalStep, FoldStep]
g.V().hasLabel('airport').limit(20).value('code').order().by(desc).fold()
g.V().hasLabel('airport').limit(20).values('code').order().by(desc).fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), RangeGlobalStep(0,20), PropertiesStep([code],value), OrderGlobalStep([[identity, desc]]), FoldStep]
g.V().hasLabel('airport').limit(20).values('code').order().by(shuffle).fold()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), RangeGlobalStep(0,20), PropertiesStep([code],value), OrderGlobalStep([[identity, shuffle]]), FoldStep]
g.V().hasLabel('airport').order().by('longest', desc).valueMap().select('code', 'longest').limit(10)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), OrderGlobalStep([[value(longest), desc]]), RangeGlobalStep(0,10), PropertyMapStep(value), SelectStep(last,[code, longest])]
g.V().hasLabel('airport').values('longest').max()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), PropertiesStep([longest],value), MaxGlobalStep]
g.V().hasLabel('airport').order().by(values('longest'), desc).limit(1).valueMap()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), OrderGlobalStep([[value(longest), desc]]), RangeGlobalStep(0,1), PropertyMapStep(value)]
g.V().hasLabel('airport').limit(5).group().by('code').by('runways')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), RangeGlobalStep(0,5), GroupStep(value(code),[TraversalMapStep(value(runways)), FoldStep])]
g.V().hasLabel('airport').limit(5
)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), RangeGlobalStep(0,5)]
g.V().has('airport', 'region', 'BG-ENG').order().by(out().count(), incr).limit(10).project('a', 'b').by('code').by('code').by(out().count())
g.V().has('airport', 'region', 'BG-ENG').order().by(out().count(), incr).limit(10).project('a', 'b').by('code').by(out().count())
g.V().has('airport', 'region', 'BG-ENG').order().by(out().count(), 'incr').limit(10).project('a', 'b').by('code').by(out().count())
g.V().has('airport', 'region', 'BG-ENG').order().by(out().count(), desc).limit(10).project('a', 'b').by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(BG-ENG)]), OrderGlobalStep([[[VertexStep(OUT,edge), CountGlobalStep], desc]]), RangeGlobalStep(0,10), ProjectStep([a, b],[value(code), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'region', 'BG-ENG').order().by(out().count(), asc).limit(10).project('a', 'b').by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(BG-ENG)]), OrderGlobalStep([[[VertexStep(OUT,edge), CountGlobalStep], asc]]), RangeGlobalStep(0,10), ProjectStep([a, b],[value(code), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'region', 'GB-ENG').order().by(out().count(), asc).limit(10).project('a', 'b').by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(GB-ENG)]), OrderGlobalStep([[[VertexStep(OUT,edge), CountGlobalStep], asc]]), RangeGlobalStep(0,10), ProjectStep([a, b],[value(code), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'region', 'GB-ENG').order().by(out().count(), desc).limit(10).project('a', 'b').by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(GB-ENG)]), OrderGlobalStep([[[VertexStep(OUT,edge), CountGlobalStep], desc]]), RangeGlobalStep(0,10), ProjectStep([a, b],[value(code), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().has('airport', 'code', 'AUS')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)])]
g.V().has('airport', 'code', 'AUS').valueMap()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertyMapStep(value)]
g.V().has('airport', 'code', 'AUS').valueMap().select('code', 'region')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertyMapStep(value), SelectStep(last,[code, region])]
g.V().has('airport', 'region', 'GB-ENG').order().by(out().count(), desc).limit(10).project('a', 'b').by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(GB-ENG)]), OrderGlobalStep([[[VertexStep(OUT,edge), CountGlobalStep], desc]]), RangeGlobalStep(0,10), ProjectStep([a, b],[value(code), [VertexStep(OUT,edge), CountGlobalStep]])]
g.V().hasLabel('airport').and(has('region', 'US-TX'), has('longest', gte(12000))).values('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), region.eq(US-TX), longest.gte(12000)]), PropertiesStep([code],value)]
g.V().hasLabel('airport').where(out().count().is(lt(100).and(gt(94)))).group().by('code').by(out().count())
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), TraversalFilterStep([VertexStep(OUT,edge), RangeGlobalStep(0,100), CountGlobalStep, IsStep(and(lt(100), gt(94)))]), GroupStep(value(code),[VertexStep(OUT,edge), CountGlobalStep])]
g.V().has('airport', 'code', 'AUS')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)])]
g.V().has('airport', 'code', 'AUS').values()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertiesStep(value)]
values = g.V().has('airport', 'code', 'AUS').values()
val = g.V().has('airport', 'code', 'AUS').values()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertiesStep(value)]
val
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertiesStep(value)]
g.V().has('airport', 'code', 'AUS').out().count()
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), VertexStep(OUT,edge), CountGlobalStep]
g.V().hasLabel('airport').out().count().group().by(out().count()).by('code')
g.V().hasLabel('airport').out().count().group().by(out().count())
g.V().hasLabel('airport').where(out().count()).group().by(out().count()).by('code')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), TraversalFilterStep([VertexStep(OUT,edge), CountGlobalStep]), GroupStep([VertexStep(OUT,edge), CountGlobalStep],[TraversalMapStep(value(code)), FoldStep])]
g.V().hasLabel('airport').where(out().count()).group().by(out().count()).by('code').limit(15)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), TraversalFilterStep([VertexStep(OUT,edge), CountGlobalStep]), GroupStep([VertexStep(OUT,edge), CountGlobalStep],[TraversalMapStep(value(code)), FoldStep]), RangeGlobalStep(0,15)]
g.V().hasLabel('airport').where(out().count()).limit(15).group().by(out().count()).by('code').limit(15)
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), TraversalFilterStep([VertexStep(OUT,edge), CountGlobalStep]), RangeGlobalStep(0,15), GroupStep([VertexStep(OUT,edge), CountGlobalStep],[TraversalMapStep(value(code)), FoldStep]), RangeGlobalStep(0,15)]
g.V().hasLabel('airport').where(out().count()).limit(15).group().by(out().count()).by('city')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)]), TraversalFilterStep([VertexStep(OUT,edge), CountGlobalStep]), RangeGlobalStep(0,15), GroupStep([VertexStep(OUT,edge), CountGlobalStep],[TraversalMapStep(value(city)), FoldStep])]
g.V().has("airport", "code", "AUS").values("city")
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport), code.eq(AUS)]), PropertiesStep([city],value)]
g.V().hasLabel("airport").values("city").ToList()
g.V().hasLabel("airport").values("city").toList()
// RESULT: A HUGE LIST OF CITIES
val.getClass()
// RESULT: class java.util.ArrayList
g.V().hasLabel('airport')
// RESULT: [TinkerGraphStep(vertex,[~label.eq(airport)])]
:record stop
// CLOSED: Wed Mar 09 14:56:56 UTC 2022
